{"version":3,"sources":["webpack:///./src/pages/image.js","webpack:///./src/pages/gallery.js"],"names":["ImageHolder","props","useState","slideIndex","setSlideIndex","isClient","setClient","imageSource","dataArray","url","imageCaption","caption","imageMaxHeight","maxHeight","imageMaxWidth","maxWidth","styles","width","objectFit","useEffect","moveSlides","n","index","length","dotArray","array","i","push","key","className","onClick","createDotArray","id","style","src","GalleryPage","currentData","setCurrentData","modalRef","useRef","colArray1","colArray2","colArray3","modal","open","current","display","document","body","overflow","createPreviewPic","thumbnail","array1","array2","array3","set","createGalleryColumns","ref","height","data","paddingTop"],"mappings":"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","file":"component---src-pages-gallery-js-0158c0989d3e3a49d880.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/image.scss';\n\nconst ImageHolder = (props) => {\n    const [slideIndex, setSlideIndex] = useState(0);\n    const [isClient, setClient] = useState(false);\n    const imageSource = isClient ? props.dataArray[slideIndex].url : \"\";\n    const imageCaption = isClient ? props.dataArray[slideIndex].caption : \"\";\n    const imageMaxHeight = isClient ? props.maxHeight : \"400px\";\n    const imageMaxWidth = isClient ? props.maxWidth : \"400px\";\n    const styles = { width: '100%', objectFit: \"cover\", maxHeight: imageMaxHeight, maxWidth: imageMaxWidth };\n\n    useEffect(() =>\n        setClient(true),\n        []);\n\n    const moveSlides = (n) => {\n        let index = slideIndex;\n        index += n;\n        if (index > props.dataArray.length - 1) { index = 0 };\n        if (index < 0) { index = props.dataArray.length - 1 };\n        setSlideIndex(index);\n        //   showSlides(slideIndex += n)\n    };\n\n    const currentSlide = (n) => (\n        setSlideIndex(n)\n    );\n\n    const createDotArray = (array) => {\n        for (let i = 0; i < props.dataArray.length; i++) {\n            array.push(\n                <div key={i}>\n                    <span className=\"dot\" onClick={() => currentSlide(i)}></span>\n                </div>\n            );\n        }\n    }\n\n    let dotArray = [];\n\n    if (isClient) {\n        createDotArray(dotArray)\n    };\n    return (\n        <div id=\"image-component-container\" style={{ maxWidth: imageMaxWidth, maxHeight: imageMaxHeight }} key={isClient}>\n            {isClient ? (\n                <>\n                    <div className=\"slideshow-container\">\n                        <div className=\"mySlides fade\">\n                            <img src={imageSource} style={styles} />\n                            <div className=\"text\"><p>{imageCaption}</p></div>\n                        </div>\n                        <a className=\"prev\" onClick={() => moveSlides(-1)}>&#10094;</a>\n                        <a className=\"next\" onClick={() => moveSlides(1)}>&#10095;</a>\n                    </div>\n                    <br></br>\n                    <div id=\"dot-container\">\n                        {dotArray}\n                    </div>\n                </>) :\n                <p>The images need to be rendered again. Please refresh your page.</p>\n            }\n        </div>\n    );\n}\n\nexport default ImageHolder;","import React, { useRef, useState, useEffect } from 'react';\nimport ImageHolder from \"./image\";\nimport '../styles/gallery.scss';\n\n\nconst GalleryPage = (props) => {\n    const [currentData, setCurrentData] = useState(0);\n    const [isClient, setClient] = useState(false);\n\n    const modalRef = useRef(null);\n    const imageMaxHeight = isClient ? props.maxHeight : \"400px\";\n    const imageMaxWidth = isClient ? props.maxWidth : \"400px\";\n\n    let colArray1 = [];\n    let colArray2 = [];\n    let colArray3 = [];\n    let modal = <></>;\n\n    useEffect(() =>  \n        setClient(true), \n        []);\n\n    const openModal = () => {\n        modalRef.current.style.display = \"flex\";\n        document.body.style.overflow = \"hidden\";\n\n    }\n    const closeModal = () => {\n        modalRef.current.style.display = \"none\";\n        document.body.style.overflow = \"visible\";\n    }\n\n    const open = (i) => {\n        setCurrentData(i);\n        openModal();\n    }\n\n    const createPreviewPic = (index, thumbnail, caption) => (\n        <div key={index} className=\"thumbnail-container\" onClick={() => open(index)}>\n            <img className=\"thumbnail-image\" src={thumbnail}></img>\n            <div className=\"caption-overlay\">\n                <p className=\"caption-text\">{caption}</p>\n            </div>\n        </div>\n    );\n\n    const createGalleryColumns = (array1, array2, array3) => {\n        let index = 0;\n        for (let i = 0; i < props.dataArray.length; i++) {\n            const set = props.dataArray[i];\n            switch (index) {\n                case (0):\n                    array1.push(\n                        createPreviewPic(i, set.thumbnail, set.caption)\n                    );\n                    break;\n                case (1):\n                    array2.push(\n                        createPreviewPic(i, set.thumbnail, set.caption)\n                    );\n                    break;\n                case (2):\n                    array3.push(\n                        createPreviewPic(i, set.thumbnail, set.caption)\n                    );\n                    break;\n            }\n            index === 2 ? index = 0 : index++;\n\n        }\n    }\n    if (isClient) {\n            createGalleryColumns(colArray1, colArray2, colArray3);\n            modal = (\n                <div className=\"modal\" ref={modalRef}>\n                    <div className=\"overlay\"></div>\n                    <span className=\"close\" onClick={closeModal}>X</span>\n                    <div id=\"image-holder-container\" style={{ width: imageMaxWidth, height: imageMaxHeight }}>\n                        <ImageHolder\n                            dataArray={props.dataArray[currentData].data}\n                            maxHeight={imageMaxHeight}\n                            maxWidth={imageMaxWidth}\n                        />\n                        {currentData}\n                    </div>\n                </div>\n            );\n        }\n\n    return (\n        <div style={{ paddingTop: \"15vh\" }} key={isClient}>\n            <h2 id=\"gallery-title-text\">Our Residential Work</h2>\n            {isClient ?\n                (\n                    <>\n                        <div className=\"main-container\" id=\"gallery-container\">\n                            <div className=\"gallery-container-column\">\n                                {colArray1}\n                            </div>\n                            <div className=\"gallery-container-column\">\n                                {colArray2}\n                            </div>\n                            <div className=\"gallery-container-column\">\n                                {colArray3}\n                            </div>\n                        </div>\n                        {isClient? modal : <></>}\n                    </>\n                )\n                : <div className=\"main-container\">\n                    <p>The images need to be rendered again. Please refresh your page.</p>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default GalleryPage;"],"sourceRoot":""}