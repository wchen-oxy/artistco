{"version":3,"sources":["webpack:///./src/pages/image.js","webpack:///./src/pages/gallery.js"],"names":["ImageHolder","props","useState","slideIndex","setSlideIndex","isClient","setClient","imageSource","dataArray","url","imageCaption","caption","useEffect","moveSlides","n","index","length","dotArray","array","i","push","key","className","style","backgroundColor","onClick","createDotArray","id","src","GalleryPage","currentData","setCurrentData","modalRef","useRef","colArray1","colArray2","colArray3","modal","open","current","display","document","body","overflow","createPreviewPic","thumbnail","array1","array2","array3","set","createGalleryColumns","ref","data"],"mappings":"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","file":"component---src-pages-gallery-js-6a6a30d154019e67623c.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/image.scss';\n\nconst ImageHolder = (props) => {\n    const [slideIndex, setSlideIndex] = useState(0);\n    const [isClient, setClient] = useState(false);\n    const imageSource = isClient ? props.dataArray[slideIndex].url : \"\";\n    const imageCaption = isClient ? props.dataArray[slideIndex].caption : \"\";\n\n    useEffect(() =>\n        setClient(true),\n        []);\n\n    const moveSlides = (n) => {\n        let index = slideIndex;\n        index += n;\n        if (index > props.dataArray.length - 1) { index = 0 };\n        if (index < 0) { index = props.dataArray.length - 1 };\n        setSlideIndex(index);\n        //   showSlides(slideIndex += n)\n    };\n\n    const currentSlide = (n) => (\n        setSlideIndex(n)\n    );\n\n    const createDotArray = (array) => {\n        for (let i = 0; i < props.dataArray.length; i++) {\n            array.push(\n                <div key={i}>\n                    <span className=\"dot\" \n                    style={i === slideIndex ? {backgroundColor: \"#4a4949\"} : { backgroundColor: \"#bbb\"}} \n                    onClick={() => currentSlide(i)}></span>\n                </div>\n            );\n        }\n    }\n\n    let dotArray = [];\n    if (isClient) {\n        createDotArray(dotArray)\n    };\n    return (\n        <div id=\"image-main-container\" key={isClient}>\n            {isClient ? (\n                <>\n                    <div className=\"slideshow-container\">\n                        <div className=\"mySlides fade\">\n                            <img id=\"image\" src={imageSource}  />\n                            <div className=\"text\" style={imageCaption.length !== 0 ? {backgroundColor: \"rgba(44, 44, 44, 0.5)\"} : {backgroundColor: \"transparent\"}}><p>{imageCaption}</p></div>\n                        </div>\n                        <a className=\"prev\" onClick={() => moveSlides(-1)}>&#10094;</a>\n                        <a className=\"next\" onClick={() => moveSlides(1)}>&#10095;</a>\n                    </div>\n                    <br></br>\n                    <div id=\"dot-container\">\n                        {dotArray}\n                    </div>\n                </>) :\n                <p>The images need to be rendered again. Please refresh your page.</p>\n            }\n        </div>\n    );\n}\n\nexport default ImageHolder;","import React, { useRef, useState, useEffect } from 'react';\nimport ImageHolder from \"./image\";\nimport '../styles/gallery.scss';\n\n\nconst GalleryPage = (props) => {\n    const [currentData, setCurrentData] = useState(0);\n    const [isClient, setClient] = useState(false);\n    const modalRef = useRef(null);\n    let colArray1 = [];\n    let colArray2 = [];\n    let colArray3 = [];\n    let modal = <></>;\n\n    useEffect(() =>\n        setClient(true),\n        []);\n\n    const openModal = () => {\n        modalRef.current.style.display = \"flex\";\n        document.body.style.overflow = \"hidden\";\n\n    }\n    const closeModal = () => {\n        modalRef.current.style.display = \"none\";\n        document.body.style.overflow = \"visible\";\n    }\n\n    const open = (i) => {\n        setCurrentData(i);\n        openModal();\n    }\n\n    const createPreviewPic = (index, thumbnail, caption) => (\n        <div key={index} className=\"thumbnail-container\" onClick={() => open(index)}>\n            <img className=\"thumbnail-image\" src={thumbnail}></img>\n            <div className=\"caption-overlay\">\n                <div className=\"caption-text-container\">\n                <p className=\"caption-text\">{caption}</p>\n                </div>\n            </div>\n        </div>\n    );\n\n    const createGalleryColumns = (array1, array2, array3) => {\n        let index = 0;\n        for (let i = 0; i < props.dataArray.length; i++) {\n            const set = props.dataArray[i];\n            switch (index) {\n                case (0):\n                    array1.push(\n                        createPreviewPic(i, set.thumbnail, set.caption)\n                    );\n                    break;\n                case (1):\n                    array2.push(\n                        createPreviewPic(i, set.thumbnail, set.caption)\n                    );\n                    break;\n                case (2):\n                    array3.push(\n                        createPreviewPic(i, set.thumbnail, set.caption)\n                    );\n                    break;\n            }\n            index === 2 ? index = 0 : index++;\n\n        }\n    }\n    if (isClient) {\n        createGalleryColumns(colArray1, colArray2, colArray3);\n        modal = (\n            <div className=\"modal\" ref={modalRef}>\n                <div className=\"overlay\"></div>\n                <span className=\"close\" onClick={closeModal}>X</span>\n                <div id=\"image-holder-container\" >\n                    <ImageHolder\n                        dataArray={props.dataArray[currentData].data}\n                    />\n                    {currentData}\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div key={isClient}>\n\n            {isClient ?\n                (\n                    <>\n                        <div className=\"main-container\" id=\"gallery-container\">\n                            <h2 id=\"gallery-title-text\">Our Residential Work</h2>\n                            <div id=\"gallery-column-container\">\n                                <div className=\"gallery-column\">\n                                    {colArray1}\n                                </div>\n                                <div className=\"gallery-column\">\n                                    {colArray2}\n                                </div>\n                                <div className=\"gallery-column\">\n                                    {colArray3}\n                                </div>\n                            </div>\n\n                        </div>\n                        {isClient ? modal : <></>}\n                    </>\n                )\n                : <div className=\"main-container\">\n                    <p>The images need to be rendered again. Please refresh your page.</p>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default GalleryPage;"],"sourceRoot":""}