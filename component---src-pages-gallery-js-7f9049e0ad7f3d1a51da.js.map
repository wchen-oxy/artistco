{"version":3,"sources":["webpack:///./src/pages/image.js","webpack:///./src/pages/gallery.js"],"names":["ImageHolder","props","useState","slideIndex","setSlideIndex","isClient","setClient","imageMaxHeight","maxHeight","imageMaxWidth","maxWidth","styles","width","objectFit","useEffect","moveSlides","n","index","dataArray","length","dotArray","array","i","push","key","className","onClick","createDotArray","id","style","src","url","caption","GalleryPage","currentData","setCurrentData","modalRef","useRef","colArray1","colArray2","colArray3","modal","open","current","display","document","body","overflow","createPreviewPic","thumbnail","array1","array2","array3","set","createGalleryColumns","ref","height","data","paddingTop"],"mappings":"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","file":"component---src-pages-gallery-js-7f9049e0ad7f3d1a51da.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/image.scss';\n\nconst ImageHolder = (props) => {\n    const [slideIndex, setSlideIndex] = useState(0);\n    const [isClient, setClient] = useState(false);\n\n    const imageMaxHeight = isClient ? props.maxHeight : \"400px\";\n    const imageMaxWidth = isClient ? props.maxWidth : \"400px\";\n    const styles = { width: '100%', objectFit: \"cover\", maxHeight: imageMaxHeight, maxWidth: imageMaxWidth };\n\n    useEffect(() =>\n        setClient(true),\n        []);\n\n    const moveSlides = (n) => {\n        let index = slideIndex;\n        index += n;\n        if (index > props.dataArray.length - 1) { index = 0 };\n        if (index < 0) { index = props.dataArray.length - 1 };\n        setSlideIndex(index);\n        //   showSlides(slideIndex += n)\n    };\n\n    const currentSlide = (n) => (\n        setSlideIndex(n)\n    );\n\n    const createDotArray = (array) => {\n        for (let i = 0; i < props.dataArray.length; i++) {\n            array.push(\n                <div key={i}>\n                    <span className=\"dot\" onClick={() => currentSlide(i)}></span>\n                </div>\n            );\n        }\n    }\n\n    let dotArray = [];\n    if (isClient) {\n        createDotArray(dotArray)\n    };\n    return (\n        <div id=\"image-component-container\" style={{maxWidth: imageMaxWidth, maxHeight: imageMaxHeight}}>\n            {isClient && props.dataArray ? (\n                <>\n                    <div className=\"slideshow-container\">\n                        <div className=\"mySlides fade\">\n                            <img src={props.dataArray[slideIndex].url} style={styles} />\n                            <div className=\"text\"><p>{props.dataArray[slideIndex].caption}</p></div>\n                        </div>\n                        <a className=\"prev\" onClick={() => moveSlides(-1)}>&#10094;</a>\n                        <a className=\"next\" onClick={() => moveSlides(1)}>&#10095;</a>\n                    </div>\n                    <br></br>\n                    <div id=\"dot-container\">\n                        {dotArray}\n                    </div>\n                </>) :\n                <p>The images need to be rendered again. Please refresh your page.</p>\n            }\n        </div>\n    );\n}\n\nexport default ImageHolder;","import React, { useRef, useState, useEffect } from 'react';\nimport ImageHolder from \"./image\";\nimport '../styles/gallery.scss';\n\n\nconst GalleryPage = (props) => {\n    const [currentData, setCurrentData] = useState(0);\n    const [isClient, setClient] = useState(false);\n\n    const modalRef = useRef(null);\n    const imageMaxHeight = isClient ? props.maxHeight : \"400px\";\n    const imageMaxWidth = isClient ? props.maxWidth : \"400px\";\n\n    let colArray1 = [];\n    let colArray2 = [];\n    let colArray3 = [];\n    let modal = <></>;\n\n    useEffect(() =>  \n        setClient(true), \n        []);\n\n    const openModal = () => {\n        modalRef.current.style.display = \"flex\";\n        document.body.style.overflow = \"hidden\";\n\n    }\n    const closeModal = () => {\n        modalRef.current.style.display = \"none\";\n        document.body.style.overflow = \"visible\";\n    }\n\n    const open = (i) => {\n        setCurrentData(i);\n        openModal();\n    }\n\n    const createPreviewPic = (index, thumbnail, caption) => (\n        <div key={index} className=\"thumbnail-container\" onClick={() => open(index)}>\n            <img className=\"thumbnail-image\" src={thumbnail}></img>\n            <div className=\"caption-overlay\">\n                <p className=\"caption-text\">{caption}</p>\n            </div>\n        </div>\n    );\n\n    const createGalleryColumns = (array1, array2, array3) => {\n        let index = 0;\n        for (let i = 0; i < props.dataArray.length; i++) {\n            const set = props.dataArray[i];\n            switch (index) {\n                case (0):\n                    array1.push(\n                        createPreviewPic(i, set.thumbnail, set.caption)\n                    );\n                    break;\n                case (1):\n                    array2.push(\n                        createPreviewPic(i, set.thumbnail, set.caption)\n                    );\n                    break;\n                case (2):\n                    array3.push(\n                        createPreviewPic(i, set.thumbnail, set.caption)\n                    );\n                    break;\n            }\n            index === 2 ? index = 0 : index++;\n\n        }\n    }\n    if (isClient) {\n            createGalleryColumns(colArray1, colArray2, colArray3);\n            modal = (\n                <div className=\"modal\" ref={modalRef}>\n                    <div className=\"overlay\"></div>\n                    <span className=\"close\" onClick={closeModal}>X</span>\n                    <div id=\"image-holder-container\" style={{ width: imageMaxWidth, height: imageMaxHeight }}>\n                        <ImageHolder\n                            dataArray={props.dataArray[currentData].data}\n                            maxHeight={imageMaxHeight}\n                            maxWidth={imageMaxWidth}\n                        />\n                        {currentData}\n                    </div>\n                </div>\n            );\n        }\n\n    return (\n        <div style={{ paddingTop: \"15vh\" }}>\n            <h2 id=\"gallery-title-text\">Our Residential Work</h2>\n            {isClient ?\n                (\n                    <>\n                        <div className=\"main-container\" id=\"gallery-container\">\n                            <div className=\"gallery-container-column\">\n                                {colArray1}\n                            </div>\n                            <div className=\"gallery-container-column\">\n                                {colArray2}\n                            </div>\n                            <div className=\"gallery-container-column\">\n                                {colArray3}\n                            </div>\n                        </div>\n                        {isClient? modal : <></>}\n                    </>\n                )\n                : <div className=\"main-container\">\n                    <p>The images need to be rendered again. Please refresh your page.</p>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default GalleryPage;"],"sourceRoot":""}