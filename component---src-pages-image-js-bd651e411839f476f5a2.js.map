{"version":3,"sources":["webpack:///./src/pages/image.js"],"names":["ImageHolder","props","useState","slideIndex","setSlideIndex","isClient","setClient","imageMaxHeight","maxHeight","imageMaxWidth","maxWidth","styles","width","objectFit","useEffect","moveSlides","n","index","dataArray","length","dotArray","array","i","push","key","className","onClick","createDotArray","id","style","src","url","caption"],"mappings":"2FAAA,0CAiEeA,UA9DK,SAACC,GAAW,IAAD,EACSC,mBAAS,GAAtCC,EADoB,KACRC,EADQ,OAEGF,oBAAS,GAAhCG,EAFoB,KAEVC,EAFU,KAIrBC,EAAiBF,EAAWJ,EAAMO,UAAY,QAC9CC,EAAgBJ,EAAWJ,EAAMS,SAAW,QAC5CC,EAAS,CAAEC,MAAO,OAAQC,UAAW,QAASL,UAAWD,EAAgBG,SAAUD,GAEzFK,qBAAU,kBACNR,GAAU,KACV,IAEJ,IAAMS,EAAa,SAACC,GAChB,IAAIC,EAAQd,GACZc,GAASD,GACGf,EAAMiB,UAAUC,OAAS,IAAKF,EAAQ,GAC9CA,EAAQ,IAAKA,EAAQhB,EAAMiB,UAAUC,OAAS,GAClDf,EAAca,IAkBdG,EAAW,GAIf,OAHIf,GAXmB,SAACgB,GACpB,IAD+B,IAAD,WACrBC,GACLD,EAAME,KACF,yBAAKC,IAAKF,GACN,0BAAMG,UAAU,MAAMC,QAAS,kBAP3CtB,EAO8DkB,SAHrDA,EAAI,EAAGA,EAAIrB,EAAMiB,UAAUC,OAAQG,IAAM,EAAzCA,GAWTK,CAAeP,GAGf,yBAAKQ,GAAG,4BAA4BC,MAAO,CAACnB,SAAUD,EAAeD,UAAWD,IAC3EF,GAAYJ,EAAMiB,UACf,oCACI,yBAAKO,UAAU,uBACX,yBAAKA,UAAU,iBACX,yBAAKK,IAAK7B,EAAMiB,UAAUf,GAAY4B,IAAKF,MAAOlB,IAClD,yBAAKc,UAAU,QAAO,2BAAIxB,EAAMiB,UAAUf,GAAY6B,WAE1D,uBAAGP,UAAU,OAAOC,QAAS,kBAAMX,GAAY,KAA/C,KACA,uBAAGU,UAAU,OAAOC,QAAS,kBAAMX,EAAW,KAA9C,MAEJ,6BACA,yBAAKa,GAAG,iBACHR,IAGT,iG","file":"component---src-pages-image-js-bd651e411839f476f5a2.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/image.scss';\n\nconst ImageHolder = (props) => {\n    const [slideIndex, setSlideIndex] = useState(0);\n    const [isClient, setClient] = useState(false);\n\n    const imageMaxHeight = isClient ? props.maxHeight : \"400px\";\n    const imageMaxWidth = isClient ? props.maxWidth : \"400px\";\n    const styles = { width: '100%', objectFit: \"cover\", maxHeight: imageMaxHeight, maxWidth: imageMaxWidth };\n\n    useEffect(() =>\n        setClient(true),\n        []);\n\n    const moveSlides = (n) => {\n        let index = slideIndex;\n        index += n;\n        if (index > props.dataArray.length - 1) { index = 0 };\n        if (index < 0) { index = props.dataArray.length - 1 };\n        setSlideIndex(index);\n        //   showSlides(slideIndex += n)\n    };\n\n    const currentSlide = (n) => (\n        setSlideIndex(n)\n    );\n\n    const createDotArray = (array) => {\n        for (let i = 0; i < props.dataArray.length; i++) {\n            array.push(\n                <div key={i}>\n                    <span className=\"dot\" onClick={() => currentSlide(i)}></span>\n                </div>\n            );\n        }\n    }\n\n    let dotArray = [];\n    if (isClient) {\n        createDotArray(dotArray)\n    };\n    return (\n        <div id=\"image-component-container\" style={{maxWidth: imageMaxWidth, maxHeight: imageMaxHeight}}>\n            {isClient && props.dataArray ? (\n                <>\n                    <div className=\"slideshow-container\">\n                        <div className=\"mySlides fade\">\n                            <img src={props.dataArray[slideIndex].url} style={styles} />\n                            <div className=\"text\"><p>{props.dataArray[slideIndex].caption}</p></div>\n                        </div>\n                        <a className=\"prev\" onClick={() => moveSlides(-1)}>&#10094;</a>\n                        <a className=\"next\" onClick={() => moveSlides(1)}>&#10095;</a>\n                    </div>\n                    <br></br>\n                    <div id=\"dot-container\">\n                        {dotArray}\n                    </div>\n                </>) :\n                <p>The images need to be rendered again. Please refresh your page.</p>\n            }\n        </div>\n    );\n}\n\nexport default ImageHolder;"],"sourceRoot":""}